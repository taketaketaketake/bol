---
export const prerender = false;

import Layout from '../../../../layout/Layout.astro';
import { supabase } from '../../../../lib/supabase';
import { getOrderById, getCustomerId } from '../../../../utils/dashboard/customer';
import { formatOrderId, canRescheduleOrder } from '../../../../utils/orderHelpers';

const { cookies } = Astro;
const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

if (!accessToken || !refreshToken) {
  return Astro.redirect('/auth/login');
}

// Set up Supabase client with cookies
const { data: { session } } = await supabase.auth.setSession({
  access_token: accessToken.value,
  refresh_token: refreshToken.value
});

if (!session) {
  return Astro.redirect('/auth/login');
}

const user = session.user;
const orderId = Astro.params.id;

if (!orderId) {
  return Astro.redirect('/dashboard');
}

// Get customer ID to verify ownership
const customerId = await getCustomerId(user.id, supabase);

if (!customerId) {
  return Astro.redirect('/dashboard');
}

// Fetch order details
const order = await getOrderById(orderId, supabase);

// Verify order exists and belongs to this customer
if (!order || order.customer_id !== customerId) {
  return Astro.redirect('/dashboard');
}

// Check if order can be rescheduled
const canReschedule = canRescheduleOrder(order.status, order.pickup_date);
if (!canReschedule) {
  return Astro.redirect(`/dashboard/orders/${orderId}`);
}

// Get today's date as minimum
const today = new Date();
const minDate = today.toISOString().split('T')[0];

// Handle form submission
let actionError = "";
let actionSuccess = false;

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const newDate = String(formData.get("pickup_date") || "");
    const newTimeWindow = String(formData.get("time_window") || "");

    if (!newDate || !newTimeWindow) {
      actionError = "Please select both a date and time window.";
    } else {
      // Update the order
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          pickup_date: newDate,
          pickup_time_window_id: newTimeWindow,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateError) {
        console.error('[Reschedule] Error updating order:', updateError);
        actionError = "Failed to reschedule order. Please try again.";
      } else {
        actionSuccess = true;
        // Redirect back to order detail page after 1 second
        return Astro.redirect(`/dashboard/orders/${orderId}?rescheduled=true`);
      }
    }
  } catch (error) {
    console.error('[Reschedule] Exception:', error);
    actionError = "An error occurred. Please try again.";
  }
}

// Fetch available time windows
const { data: timeWindows } = await supabase
  .from('time_windows')
  .select('id, label, start_time, end_time')
  .order('start_time', { ascending: true });
---

<Layout title={`Reschedule Order ${formatOrderId(order.id)}`}>
  <div class="min-h-screen bg-brand-bg">
    <main class="max-w-2xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <!-- Back Button -->
      <div class="mb-4">
        <a href={`/dashboard/orders/${orderId}`} class="text-brand-primary hover:underline text-sm flex items-center gap-1">
          <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to Order
        </a>
      </div>

      <!-- Header -->
      <div class="mb-6">
        <h1 class="text-2xl sm:text-3xl font-bold text-brand-text">
          Reschedule Order
        </h1>
        <p class="text-sm text-brand-muted mt-1">
          {formatOrderId(order.id)} â€¢ Current pickup: {new Date(order.pickup_date).toLocaleDateString()}
        </p>
      </div>

      <!-- Error Message -->
      {actionError && (
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p class="text-red-700 font-medium">{actionError}</p>
          </div>
        </div>
      )}

      <!-- Success Message -->
      {actionSuccess && (
        <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <p class="text-green-700 font-medium">Order rescheduled successfully!</p>
          </div>
        </div>
      )}

      <!-- Reschedule Form -->
      <form method="POST" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 space-y-6">
        <!-- Current Pickup Info -->
        <div class="bg-gray-50 rounded-lg p-4">
          <h3 class="font-semibold text-brand-text mb-2">Current Pickup</h3>
          <div class="text-sm text-brand-muted space-y-1">
            <p>
              <span class="font-medium">Date:</span> {new Date(order.pickup_date).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </p>
            <p>
              <span class="font-medium">Time:</span> {order.pickup_time_window?.label || 'Not specified'}
            </p>
          </div>
        </div>

        <!-- New Pickup Date -->
        <div>
          <label for="pickup_date" class="block text-sm font-semibold text-brand-text mb-2">
            New Pickup Date
          </label>
          <input
            type="date"
            id="pickup_date"
            name="pickup_date"
            min={minDate}
            value={order.pickup_date}
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-primary focus:border-brand-primary"
          />
          <p class="text-xs text-brand-muted mt-1">
            Select a new date for pickup
          </p>
        </div>

        <!-- New Time Window -->
        <div>
          <label class="block text-sm font-semibold text-brand-text mb-3">
            New Time Window
          </label>
          <div class="space-y-2">
            {timeWindows && timeWindows.length > 0 ? (
              timeWindows.map((window) => {
                const isCurrentWindow = window.id === order.pickup_time_window_id;
                return (
                  <label
                    class={`flex items-center p-4 border-2 rounded-lg cursor-pointer transition hover:border-brand-primary hover:bg-orange-50 ${
                      isCurrentWindow ? 'border-brand-primary bg-orange-50' : 'border-gray-200'
                    }`}
                  >
                    <input
                      type="radio"
                      name="time_window"
                      value={window.id}
                      checked={isCurrentWindow}
                      required
                      class="w-4 h-4 text-brand-primary border-gray-300 focus:ring-brand-primary"
                    />
                    <div class="ml-3 flex-1">
                      <div class="font-medium text-brand-text">{window.label}</div>
                      <div class="text-sm text-brand-muted">
                        {window.start_time && window.end_time && (
                          `${new Date(`2000-01-01T${window.start_time}`).toLocaleTimeString('en-US', {
                            hour: 'numeric',
                            minute: '2-digit',
                            hour12: true
                          })} - ${new Date(`2000-01-01T${window.end_time}`).toLocaleTimeString('en-US', {
                            hour: 'numeric',
                            minute: '2-digit',
                            hour12: true
                          })}`
                        )}
                      </div>
                    </div>
                  </label>
                );
              })
            ) : (
              <p class="text-sm text-brand-muted">No time windows available</p>
            )}
          </div>
        </div>

        <!-- Important Notice -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div class="flex items-start gap-3">
            <div class="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
              <svg class="w-4 h-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div>
              <h4 class="font-semibold text-blue-900 text-sm">Important</h4>
              <p class="text-xs text-blue-700 mt-1">
                Orders can only be rescheduled up to 6 hours before the scheduled pickup time. You'll receive a confirmation email once your order is rescheduled.
              </p>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-3 pt-4">
          <a
            href={`/dashboard/orders/${orderId}`}
            class="flex-1 bg-white text-gray-700 border border-gray-300 py-3 px-6 rounded-lg text-center font-medium hover:bg-gray-50 transition"
          >
            Cancel
          </a>
          <button
            type="submit"
            class="flex-1 bg-brand-primary text-white py-3 px-6 rounded-lg font-semibold hover:bg-orange-600 transition"
          >
            Confirm Reschedule
          </button>
        </div>
      </form>

      <!-- Help Section -->
      <div class="mt-6 text-center text-sm text-brand-muted">
        <p>Need help rescheduling?</p>
        <a href="tel:8559274224" class="text-brand-primary hover:underline font-medium">
          Call us at (855) WASH-BAGS
        </a>
      </div>
    </main>
  </div>
</Layout>
