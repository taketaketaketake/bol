---
import Layout from '../layout/Layout.astro';
import ProgressSteps from '../components/ProgressSteps';
import { z } from "zod";
import { readWizard, writeWizard } from "../utils/wizard.server";
import { supabase } from '../lib/supabase';

const Schema = z.object({
  line1: z.string().min(3),
  dropoffLine1: z.string().optional(),
  dropoffDate: z.string().optional(),
  sameAsPickup: z.boolean().default(true),
  date: z.string().min(10), // YYYY-MM-DD
  timeWindow: z.string().min(1),
  phone: z.string().min(7)
}).refine((data) => {
  if (!data.sameAsPickup) {
    return (
      data.dropoffLine1 &&
      data.dropoffLine1.length >= 3 &&
      data.dropoffDate &&
      data.dropoffDate.length >= 10
    );
  }
  return true;
}, {
  message: "Drop-off address and date are required when different from pickup",
  path: ["dropoffLine1"]
}).refine((data) => {
  if (!data.sameAsPickup && data.dropoffDate && data.date) {
    return new Date(data.dropoffDate) > new Date(data.date);
  }
  return true;
}, {
  message: "Drop-off date must be after pickup date",
  path: ["dropoffDate"]
});

// Server-side handling
let w = {};
let actionError = "";

// Check if user wants to start fresh
const url = new URL(Astro.request.url);
const startFresh = url.searchParams.get('fresh') === 'true';

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();

    const data = {
      line1: String(formData.get("line1") || ""),
      dropoffLine1: String(formData.get("dropoffLine1") || ""),
      dropoffDate: String(formData.get("dropoffDate") || ""),
      sameAsPickup: formData.get("sameAsPickup") === "on",
      date: String(formData.get("date") || ""),
      timeWindow: String(formData.get("timeWindow") || ""),
      phone: String(formData.get("phone") || "")
    };

    // Check if this is a homepage pre-fill (has address/phone but missing timeWindow)
    const isHomepagePrefill = data.line1 && data.phone && !data.timeWindow;

    if (isHomepagePrefill) {
      // Homepage pre-fill: Store partial data in wizard state, don't validate yet
      w = {
        address: { line1: data.line1 },
        phone: data.phone,
        date: data.date || undefined, // Include date if provided from homepage
        dropoffAddress: data.sameAsPickup ? null : undefined
      };
    } else {
      // Complete form submission: Validate and proceed
      const parsed = Schema.safeParse(data);
      if (!parsed.success) {
        actionError = parsed.error.issues[0]?.message || "Please complete all fields.";
      } else {
        return writeWizard(Astro.request, {
          address: { line1: parsed.data.line1 },
          dropoffAddress: parsed.data.sameAsPickup ? null : {
            line1: parsed.data.dropoffLine1!,
            date: parsed.data.dropoffDate!
          },
          date: parsed.data.date,
          timeWindow: parsed.data.timeWindow,
          phone: parsed.data.phone
        }, "/order-type");
      }
    }
  } catch (error) {
    actionError = "An error occurred processing your request.";
  }
} else {
  // GET request: Load existing wizard state (unless starting fresh)
  if (!startFresh) {
    w = await readWizard(Astro.request);
  }

  // If no wizard data exists OR if it's just basic address/phone (from previous session),
  // OR if user requested fresh start, try to prefill from logged-in user's profile
  const hasOnlyBasicData = w && Object.keys(w).length <= 2 && (w.address || w.phone);
  const hasNoData = !w || Object.keys(w).length === 0;

  if (hasNoData || hasOnlyBasicData || startFresh) {
    const { cookies } = Astro;
    const accessToken = cookies.get('sb-access-token');
    const refreshToken = cookies.get('sb-refresh-token');

    if (accessToken && refreshToken) {
      const { data: { session } } = await supabase.auth.setSession({
        access_token: accessToken.value,
        refresh_token: refreshToken.value
      });

      if (session?.user) {
        const metadata = session.user.user_metadata || {};
        // Only override if we have profile data
        if (metadata.address || metadata.phone) {
          w = {
            address: metadata.address ? { line1: metadata.address } : w?.address,
            phone: metadata.phone || w?.phone
          };
        }
      }
    }
  }
}

// Get today's date as minimum
const today = new Date();
const minDate = today.toISOString().split('T')[0];

// SEO
const title = "Schedule Pickup | Bags of Laundry";
const description = "Schedule your laundry pickup. Enter your address, date, and contact info to get started.";
---

<Layout title={title} description={description} noIndex={true}>
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-2xl mx-auto px-4 py-8">

      <!-- Progress Steps -->
      <ProgressSteps client:load currentStep={1} />

      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
          Where & when should we pick up?
        </h1>
        <p class="text-gray-600">
          Enter your pickup details to get started with your laundry service
        </p>
      </div>

      <!-- Error Message -->
      {actionError && (
        <div class="bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p class="text-red-700 font-medium">{actionError}</p>
          </div>
        </div>
      )}

      <!-- Form -->
      <form method="post" class="space-y-6">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">

          <!-- Pickup Address Section -->
          <div class="mb-6">
            <label class="block text-sm font-semibold text-gray-900 mb-2">
              Pickup Address
            </label>
            <input
              id="address-input"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-900 placeholder-gray-500"
              name="line1"
              placeholder="Enter your street address"
              value={w.address?.line1 || ""}
              required
            />
            <p class="text-xs text-gray-500 mt-1">
              We'll pick up from this location during your selected time window
            </p>
          </div>

          <!-- Details Grid -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">

            <!-- Date -->
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">
                Pickup Date
              </label>
              <input
                id="pickup-date"
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-900"
                type="date"
                name="date"
                min={minDate}
                value={w.date || ""}
                required
              />
              <div id="availability-status" class="mt-1 text-xs text-gray-500">
                <!-- Availability status removed - using static time windows -->
              </div>
            </div>

            <!-- Phone -->
            <div>
              <label class="block text-sm font-semibold text-gray-900 mb-2">
                Mobile Number
              </label>
              <input
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-900 placeholder-gray-500"
                name="phone"
                type="tel"
                placeholder="(555) 123-4567"
                value={w.phone || ""}
                required
              />
            </div>
          </div>

          <!-- Time Window Selection -->
          <div class="mt-6">
            <label class="block text-sm font-semibold text-gray-900 mb-4">
              Select Pickup Time Window
            </label>
            <div class="space-y-2">
              <button type="button" class="time-window-btn w-full p-4 border-2 border-gray-200 rounded-xl text-left hover:border-blue-300 hover:bg-blue-50 transition-all duration-200" data-window="morning">
                <div class="flex justify-between items-center">
                  <div>
                    <div class="font-medium text-gray-900">Morning</div>
                    <div class="text-sm text-gray-600">8:00 AM - 12:00 PM</div>
                  </div>
                </div>
              </button>
              <button type="button" class="time-window-btn w-full p-4 border-2 border-gray-200 rounded-xl text-left hover:border-blue-300 hover:bg-blue-50 transition-all duration-200" data-window="afternoon">
                <div class="flex justify-between items-center">
                  <div>
                    <div class="font-medium text-gray-900">Afternoon</div>
                    <div class="text-sm text-gray-600">12:00 PM - 4:00 PM</div>
                  </div>
                </div>
              </button>
              <button type="button" class="time-window-btn w-full p-4 border-2 border-gray-200 rounded-xl text-left hover:border-blue-300 hover:bg-blue-50 transition-all duration-200" data-window="evening">
                <div class="flex justify-between items-center">
                  <div>
                    <div class="font-medium text-gray-900">Evening</div>
                    <div class="text-sm text-gray-600">4:00 PM - 8:00 PM</div>
                  </div>
                </div>
              </button>
            </div>
            <input type="hidden" name="timeWindow" id="selected-time-window" value={w.timeWindow || ""} required />
          </div>
        </div>

        <!-- Same as Pickup Checkbox -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="sameAsPickup"
              name="sameAsPickup"
              class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              checked
            />
            <label for="sameAsPickup" class="ml-3 text-sm font-medium text-gray-900">
              Drop-off at same location as pickup
            </label>
          </div>
          <p class="text-xs text-gray-500 mt-2 ml-7">
            Uncheck this if you need delivery to a different address
          </p>
        </div>

        <!-- Drop-off Section -->
        <div id="dropoff-section" class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hidden">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Drop-off Address</h3>

          <!-- Drop-off Address -->
          <div class="mb-6">
            <label class="block text-sm font-semibold text-gray-900 mb-2">
              Drop-off Address
            </label>
            <input
              id="dropoff-address-input"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-900 placeholder-gray-500"
              name="dropoffLine1"
              placeholder="Enter drop-off street address"
              value={w.dropoffAddress?.line1 || ""}
            />
            <p class="text-xs text-gray-500 mt-1">
              We'll deliver your clean laundry to this location
            </p>
          </div>

          <!-- Drop-off Date -->
          <div>
            <label class="block text-sm font-semibold text-gray-900 mb-2">
              Drop-off Date
            </label>
            <input
              type="date"
              id="dropoff-date"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-900 sm:max-w-xs"
              name="dropoffDate"
              min={minDate}
              value={w.dropoffAddress?.date || ""}
            />
            <p class="text-xs text-gray-500 mt-1">
              When would you like your clean laundry delivered?
            </p>
          </div>
        </div>

        <!-- Service Info -->
        <div class="bg-blue-50 border border-blue-200 rounded-xl p-6">
          <div class="flex items-start gap-4">
            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <div>
              <h3 class="font-semibold text-gray-900 mb-1">Quick & Convenient</h3>
              <p class="text-sm text-gray-600 mb-2">
                We'll text you 30 minutes before pickup and provide real-time updates throughout the process.
              </p>
              <div class="flex flex-wrap gap-4 text-xs text-gray-500">
                <span>• 24-hour turnaround</span>
                <span>• $35 minimum order</span>
                <span>• Free pickup & delivery</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex flex-col sm:flex-row gap-3">
          <button
            type="submit"
            class="flex-1 bg-blue-600 text-white px-8 py-4 rounded-xl font-semibold hover:bg-blue-700 hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2"
          >
            Continue to Services
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>

          <a
            href="/pricing"
            class="bg-white text-gray-700 border-2 border-gray-300 px-6 py-4 rounded-xl font-medium hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 002 2z" />
            </svg>
            View Pricing
          </a>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Toggle dropoff section
    document.addEventListener('DOMContentLoaded', function() {
      const sameAsPickupCheckbox = document.getElementById('sameAsPickup') as HTMLInputElement;
      const dropoffSection = document.getElementById('dropoff-section');
      const dropoffInputs = dropoffSection?.querySelectorAll('input');

      function toggleDropoffSection() {
        if (sameAsPickupCheckbox.checked) {
          dropoffSection?.classList.add('hidden');
          dropoffInputs?.forEach(input => {
            input.removeAttribute('required');
          });
        } else {
          dropoffSection?.classList.remove('hidden');
          dropoffInputs?.forEach(input => {
            if (input.name === 'dropoffLine1' || input.name === 'dropoffDate') {
              input.setAttribute('required', '');
            }
          });
        }
      }

      sameAsPickupCheckbox?.addEventListener('change', toggleDropoffSection);
      toggleDropoffSection(); // Initialize

      // Update dropoff date minimum when pickup date changes
      const pickupDateInput = document.getElementById('pickup-date') as HTMLInputElement;
      const dropoffDateInput = document.getElementById('dropoff-date') as HTMLInputElement;

      function updateDropoffMinDate() {
        if (pickupDateInput?.value && dropoffDateInput) {
          // Set dropoff minimum to the day after pickup
          const pickupDate = new Date(pickupDateInput.value);
          pickupDate.setDate(pickupDate.getDate() + 1);
          const minDropoffDate = pickupDate.toISOString().split('T')[0];
          dropoffDateInput.setAttribute('min', minDropoffDate);

          // If current dropoff date is before the new minimum, clear it
          if (dropoffDateInput.value && dropoffDateInput.value <= pickupDateInput.value) {
            dropoffDateInput.value = '';
          }
        }
      }

      pickupDateInput?.addEventListener('change', function() {
        updateDropoffMinDate();
        // checkAvailability(); // Disabled - using static time windows
      });
      // Initialize on page load
      updateDropoffMinDate();

      // Availability checking functionality
      let availabilityCheckTimeout: NodeJS.Timeout;
      const addressInput = document.getElementById('address-input') as HTMLInputElement;
      const availabilityStatus = document.getElementById('availability-status') as HTMLElement;
      const timeWindowSection = document.getElementById('time-window-section') as HTMLElement;
      const timeWindowsContainer = document.getElementById('time-windows-container') as HTMLElement;
      const selectedTimeWindow = document.getElementById('selected-time-window') as HTMLInputElement;
      const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;

      let currentTimeWindows: any[] = [];

      const checkAvailability = async () => {
        const address = addressInput?.value?.trim();
        const date = pickupDateInput?.value;

        // Clear previous results
        timeWindowSection?.classList.add('hidden');
        selectedTimeWindow.value = '';
        currentTimeWindows = [];

        if (!address || address.length < 10 || !date) {
          availabilityStatus.textContent = 'Enter address and select date to check availability';
          availabilityStatus.className = 'mt-1 text-xs text-gray-500';
          return;
        }

        availabilityStatus.textContent = 'Checking availability...';
        availabilityStatus.className = 'mt-1 text-xs text-blue-600';

        try {
          const response = await fetch('/api/check-availability', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ address, date })
          });

          const data = await response.json();
          console.log('Availability response:', data);

          if (data.available && data.timeWindows?.length > 0) {
            currentTimeWindows = data.timeWindows;
            displayTimeWindows(data.timeWindows);
            availabilityStatus.textContent = `✓ Available in ${data.zone.name}`;
            availabilityStatus.className = 'mt-1 text-xs text-green-600';
            timeWindowSection?.classList.remove('hidden');
          } else {
            availabilityStatus.textContent = data.message || data.error || 'No availability for this date/location';
            availabilityStatus.className = 'mt-1 text-xs text-orange-600';
            console.warn('No availability:', data);
          }
        } catch (error) {
          console.error('Error checking availability:', error);
          availabilityStatus.textContent = 'Unable to check availability. Please try again.';
          availabilityStatus.className = 'mt-1 text-xs text-red-600';
        }
      };

      const displayTimeWindows = (windows: any[]) => {
        timeWindowsContainer.innerHTML = '';

        windows.forEach((window: any) => {
          const windowDiv = document.createElement('div');
          windowDiv.className = 'relative';

          const windowButton = document.createElement('button');
          windowButton.type = 'button';
          windowButton.className = `w-full p-4 border-2 border-gray-200 rounded-xl text-left hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 time-window-option ${
            window.availableSlots === 0 ? 'opacity-50 cursor-not-allowed' : ''
          }`;
          windowButton.disabled = window.availableSlots === 0;

          windowButton.innerHTML = `
            <div class="flex justify-between items-center">
              <div>
                <div class="font-medium text-gray-900">${window.label}</div>
                <div class="text-sm text-gray-600">${formatTimeRange(window.startTime, window.endTime)}</div>
              </div>
              <div class="text-right">
                <div class="text-sm font-medium ${window.availableSlots > 0 ? 'text-green-600' : 'text-red-600'}">
                  ${window.availableSlots > 0 ? `${window.availableSlots} slots` : 'Full'}
                </div>
                <div class="text-xs text-gray-500">of ${window.totalCapacity}</div>
              </div>
            </div>
          `;

          windowButton.addEventListener('click', function() {
            if (this.disabled) return;

            // Clear previous selections
            document.querySelectorAll('.time-window-option').forEach(btn => {
              btn.classList.remove('border-blue-500', 'bg-blue-50');
            });

            // Select this window
            this.classList.add('border-blue-500', 'bg-blue-50');
            selectedTimeWindow.value = window.id;
          });

          windowDiv.appendChild(windowButton);
          timeWindowsContainer.appendChild(windowDiv);
        });
      };

      const formatTimeRange = (start: string, end: string) => {
        const formatTime = (time: string) => {
          const [hours, minutes] = time.split(':');
          const hour = parseInt(hours);
          const ampm = hour >= 12 ? 'PM' : 'AM';
          const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
          return `${displayHour}:${minutes} ${ampm}`;
        };

        return `${formatTime(start)} - ${formatTime(end)}`;
      };

      // Debounced availability check on address change - DISABLED
      // addressInput?.addEventListener('input', function() {
      //   clearTimeout(availabilityCheckTimeout);
      //   availabilityCheckTimeout = setTimeout(checkAvailability, 500);
      // });

      // Address autocomplete functionality
      const setupAddressAutocomplete = (input: HTMLInputElement) => {
        if (!input || input.dataset.autocompleteInitialized) return;
        input.dataset.autocompleteInitialized = "true";

        let debounceTimer: NodeJS.Timeout;
        let suggestionsList: HTMLElement | null = null;

        const removeSuggestions = () => {
          if (suggestionsList) {
            suggestionsList.remove();
            suggestionsList = null;
          }
        };

        const showSuggestions = (suggestions: any[], showNoResults = false) => {
          removeSuggestions();
          suggestionsList = document.createElement("div");
          suggestionsList.className =
            "absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-xl shadow-lg z-50 max-h-60 overflow-y-auto mt-1";

          if (suggestions.length === 0 && showNoResults) {
            const noResultsItem = document.createElement("div");
            noResultsItem.className = "px-4 py-3 text-gray-500 text-sm";
            noResultsItem.textContent =
              "No addresses found. Service area limited to Michigan.";
            suggestionsList.appendChild(noResultsItem);
          } else if (suggestions.length > 0) {
            suggestions.forEach((suggestion: any) => {
              const item = document.createElement("div");
              item.className =
                "px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0";
              item.textContent = suggestion.place_name;

              item.addEventListener("click", () => {
                input.value = suggestion.place_name;
                removeSuggestions();
              });

              suggestionsList!.appendChild(item);
            });
          } else {
            return;
          }

          input.parentElement!.style.position = "relative";
          input.parentElement!.appendChild(suggestionsList);
        };

        const searchAddresses = async (query: string) => {
          if (query.length < 3) {
            removeSuggestions();
            return;
          }
          try {
            const response = await fetch(
              `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(
                query
              )}.json?access_token=${import.meta.env.PUBLIC_MAPBOX_ACCESS_TOKEN}&country=US&types=address,poi&limit=5&bbox=-90.4180,41.6962,-82.4137,48.3063`
            );
            const data = await response.json();
            showSuggestions(data.features || [], query.length >= 10);
          } catch (error) {
            console.error("Address search error:", error);
          }
        };

        input.addEventListener("input", (e) => {
          const query = (e.target as HTMLInputElement).value;
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => searchAddresses(query), 300);
        });

        input.addEventListener("blur", () => {
          setTimeout(removeSuggestions, 150);
        });
      };

      const dropoffAddressInput = document.getElementById('dropoff-address-input') as HTMLInputElement;

      setupAddressAutocomplete(addressInput);
      setupAddressAutocomplete(dropoffAddressInput);

      // Time window selection
      const timeWindowButtons = document.querySelectorAll('.time-window-btn');

      // Pre-select saved time window on page load
      const savedTimeWindow = selectedTimeWindow?.value;
      if (savedTimeWindow) {
        timeWindowButtons.forEach(btn => {
          if (btn.getAttribute('data-window') === savedTimeWindow) {
            btn.classList.add('border-blue-500', 'bg-blue-50');
          }
        });
      }

      timeWindowButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          // Clear previous selections
          timeWindowButtons.forEach(b => {
            b.classList.remove('border-blue-500', 'bg-blue-50');
          });

          // Select this window
          this.classList.add('border-blue-500', 'bg-blue-50');
          const windowValue = this.getAttribute('data-window');
          if (selectedTimeWindow) {
            selectedTimeWindow.value = windowValue || '';
          }
        });
      });

      // Debug form submission
      const form = document.querySelector('form');
      form?.addEventListener('submit', (e) => {
        console.log('Form submit triggered');
        console.log('Address:', addressInput?.value);
        console.log('Date:', pickupDateInput?.value);
        console.log('Phone:', form.querySelector('input[name="phone"]')?.value);
        console.log('Time window:', selectedTimeWindow?.value);

        // Check if all required fields are filled
        if (!selectedTimeWindow?.value) {
          e.preventDefault();
          alert('Please select a time window');
          return;
        }
      });
    });
  </script>
</Layout>