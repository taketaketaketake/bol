---
export const prerender = false;
import Layout from '../../layout/Layout.astro';
import { getSession } from '../../utils/auth';
import { createClient } from '@supabase/supabase-js';

const { id } = Astro.params;

// Require authentication
const session = await getSession(Astro.cookies);
if (!session?.user?.id) {
  return Astro.redirect(`/auth/login?redirect=/orders/${id}`);
}

// Create authenticated Supabase client
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

await supabase.auth.setSession({
  access_token: Astro.cookies.get('sb-access-token')?.value || '',
  refresh_token: Astro.cookies.get('sb-refresh-token')?.value || ''
});

// Fetch order with customer verification
const { data: order, error: orderError } = await supabase
  .from('orders')
  .select(`
    *,
    customer:customers!inner(
      id,
      full_name,
      email,
      phone,
      auth_user_id
    ),
    pickup_time_window:time_windows!pickup_time_window_id(
      label,
      start_time,
      end_time
    )
  `)
  .eq('id', id)
  .eq('customer.auth_user_id', session.user.id)
  .single();

// If order not found or doesn't belong to user, redirect
if (orderError || !order) {
  console.error('[Order Detail] Order not found or access denied:', orderError);
  return Astro.redirect('/dashboard?error=order-not-found');
}

// Format date for display
const formatDate = (dateStr: string) => {
  return new Date(dateStr).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Format time window
const formatTimeWindow = (startTime: string, endTime: string) => {
  const formatTime = (time: string) => {
    const [hours, minutes] = time.split(':');
    const hour = parseInt(hours);
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
    return `${displayHour}:${minutes} ${ampm}`;
  };
  return `${formatTime(startTime)} - ${formatTime(endTime)}`;
};

// Get status display info
const getStatusInfo = (status: string) => {
  const statusMap: { [key: string]: { label: string; color: string; icon: string } } = {
    'scheduled': { label: 'Scheduled', color: 'blue', icon: 'ðŸ“…' },
    'en_route_pickup': { label: 'En Route to Pickup', color: 'yellow', icon: 'ðŸš—' },
    'picked_up': { label: 'Picked Up', color: 'orange', icon: 'âœ…' },
    'processing': { label: 'Processing', color: 'purple', icon: 'ðŸ§¼' },
    'ready_for_delivery': { label: 'Ready for Delivery', color: 'green', icon: 'ðŸ“¦' },
    'en_route_delivery': { label: 'Out for Delivery', color: 'blue', icon: 'ðŸšš' },
    'delivered': { label: 'Delivered', color: 'green', icon: 'âœ¨' },
    'completed': { label: 'Completed', color: 'gray', icon: 'âœ“' }
  };
  return statusMap[status] || { label: status, color: 'gray', icon: 'â€¢' };
};

const statusInfo = getStatusInfo(order.status);

const title = `Order #${order.id.slice(0, 8)} | Bags of Laundry`;
const description = 'View your laundry order details and track status';
---

<Layout title={title} description={description} noIndex={true}>
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4">
      
      <!-- Header -->
      <div class="mb-6">
        <a href="/dashboard" class="text-blue-600 hover:text-blue-700 flex items-center gap-2 mb-4">
          <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M15 19l-7-7 7-7" />
          </svg>
          Back to Dashboard
        </a>
        <h1 class="text-3xl font-bold text-gray-900">Order Details</h1>
        <p class="text-gray-600 mt-1">Order #{order.id.slice(0, 8)}</p>
      </div>

      <!-- Status Card -->
      <div class={`bg-white rounded-xl shadow-sm border-2 p-6 mb-6 ${
        statusInfo.color === 'blue' ? 'border-blue-200' :
        statusInfo.color === 'yellow' ? 'border-yellow-200' :
        statusInfo.color === 'orange' ? 'border-orange-200' :
        statusInfo.color === 'purple' ? 'border-purple-200' :
        statusInfo.color === 'green' ? 'border-green-200' :
        'border-gray-200'
      }`}>
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <div class="text-4xl">{statusInfo.icon}</div>
            <div>
              <h2 class="text-2xl font-semibold text-gray-900">{statusInfo.label}</h2>
              <p class="text-gray-600">Created {formatDate(order.created_at)}</p>
            </div>
          </div>
          <div class={`px-4 py-2 rounded-full text-sm font-semibold ${
            statusInfo.color === 'blue' ? 'bg-blue-100 text-blue-800' :
            statusInfo.color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
            statusInfo.color === 'orange' ? 'bg-orange-100 text-orange-800' :
            statusInfo.color === 'purple' ? 'bg-purple-100 text-purple-800' :
            statusInfo.color === 'green' ? 'bg-green-100 text-green-800' :
            'bg-gray-100 text-gray-800'
          }`}>
            {order.payment_status === 'paid' ? 'Paid' : order.payment_status === 'requires_payment' ? 'Payment Pending' : order.payment_status}
          </div>
        </div>
      </div>

      <div class="grid md:grid-cols-2 gap-6">
        
        <!-- Pickup Information -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Pickup Details</h3>
          </div>
          
          <div class="space-y-3 text-sm">
            <div>
              <span class="font-medium text-gray-900">Date:</span>
              <p class="text-gray-600">{formatDate(order.pickup_date)}</p>
            </div>
            <div>
              <span class="font-medium text-gray-900">Time Window:</span>
              <p class="text-gray-600">
                {order.pickup_time_window 
                  ? formatTimeWindow(order.pickup_time_window.start_time, order.pickup_time_window.end_time)
                  : 'Not specified'}
              </p>
            </div>
            <div>
              <span class="font-medium text-gray-900">Address:</span>
              <p class="text-gray-600">
                {order.pickup_address_line1}
                {order.pickup_address_line2 && <><br/>{order.pickup_address_line2}</>}
                <br/>{order.pickup_address_city}, {order.pickup_address_state} {order.pickup_address_postal_code}
              </p>
            </div>
          </div>
        </div>

        <!-- Service Information -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Service Details</h3>
          </div>
          
          <div class="space-y-3 text-sm">
            <div>
              <span class="font-medium text-gray-900">Service Type:</span>
              <p class="text-gray-600 capitalize">{order.service_type.replace('_', ' ')}</p>
            </div>
            <div>
              <span class="font-medium text-gray-900">Pricing Model:</span>
              <p class="text-gray-600 capitalize">{order.pricing_model?.replace('_', ' ') || 'Per pound'}</p>
            </div>
            {order.measured_weight_lb && (
              <div>
                <span class="font-medium text-gray-900">Weight:</span>
                <p class="text-gray-600">{order.measured_weight_lb} lbs</p>
              </div>
            )}
            {order.notes && (
              <div>
                <span class="font-medium text-gray-900">Notes:</span>
                <p class="text-gray-600">{order.notes}</p>
              </div>
            )}
          </div>
        </div>

        <!-- Pricing Information -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0
        1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Pricing</h3>
          </div>

          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal:</span>
              <span class="font-medium text-gray-900">${(order.subtotal_cents / 100).toFixed(2)}</span>
            </div>
            {order.discounts_cents > 0 && (
              <div class="flex justify-between text-green-600">
                <span>Discounts:</span>
                <span>-${(order.discounts_cents / 100).toFixed(2)}</span>
              </div>
            )}
            {order.taxes_cents > 0 && (
              <div class="flex justify-between">
                <span class="text-gray-600">Tax:</span>
                <span class="font-medium text-gray-900">${(order.taxes_cents / 100).toFixed(2)}</span>
              </div>
            )}
            <div class="border-t pt-2 flex justify-between">
              <span class="font-semibold text-gray-900">Total:</span>
              <span class="font-bold text-gray-900 text-lg">${(order.total_cents / 100).toFixed(2)}</span>
            </div>
          </div>
        </div>

        <!-- Contact Information -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Contact Info</h3>
          </div>
          
          <div class="space-y-3 text-sm">
            <div>
              <span class="font-medium text-gray-900">Name:</span>
              <p class="text-gray-600">{order.customer.full_name}</p>
            </div>
            <div>
              <span class="font-medium text-gray-900">Email:</span>
              <p class="text-gray-600">{order.customer.email}</p>
            </div>
            {order.customer.phone && (
              <div>
                <span class="font-medium text-gray-900">Phone:</span>
                <p class="text-gray-600">{order.customer.phone}</p>
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- Actions -->
      <div class="mt-6 flex gap-3">
        <a
          href="/dashboard"
          class="flex-1 bg-blue-600 text-white px-6 py-3 rounded-xl font-semibold hover:bg-blue-700 transition-all duration-200 flex items-center justify-center gap-2"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Go to Dashboard
        </a>
        {order.status === 'scheduled' && (
          <a
            href={`mailto:support@bagsoflaundry.com?subject=Order ${order.id.slice(0, 8)} - Question`}
            class="bg-white text-gray-700 border-2 border-gray-300 px-6 py-3 rounded-xl font-medium hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            Contact Support
          </a>
        )}
      </div>
    </div>
  </div>
</Layout>