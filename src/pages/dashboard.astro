---
export const prerender = false;

import Layout from '../layout/Layout.astro';
import { supabase } from '../lib/supabase';
import { getDashboardData } from '../utils/dashboard/customer';
import { getStatusColor, getStatusLabel, formatCents, formatOrderId } from '../utils/orderHelpers';

const { cookies } = Astro;
const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

if (!accessToken || !refreshToken) {
  return Astro.redirect('/auth/login');
}

// Set up Supabase client with cookies
const { data: { session } } = await supabase.auth.setSession({
  access_token: accessToken.value,
  refresh_token: refreshToken.value
});

if (!session) {
  return Astro.redirect('/auth/login');
}

const user = session.user;

// Fetch real dashboard data
const dashboardData = await getDashboardData(user.id, supabase);

if (!dashboardData) {
  // Customer doesn't exist yet - redirect to profile setup or show empty state
  console.warn('[Dashboard] No customer record found for user:', user.id);
}

const activeOrders = dashboardData?.activeOrders || [];
const upcomingPickups = dashboardData?.upcomingPickups || [];
const orderHistory = dashboardData?.orderHistory || [];
const stats = dashboardData?.stats || { totalOrders: 0, totalSpent: 0 };
const membership = dashboardData?.membership || null;

// Check for success/error messages from URL params
const url = new URL(Astro.request.url);
const cancelled = url.searchParams.get('cancelled');
const refundAmount = url.searchParams.get('refund');
const error = url.searchParams.get('error');
---

<Layout title="Dashboard">
  <div class="min-h-screen bg-brand-bg">
    <main class="max-w-6xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-6">
        <h1 class="text-2xl sm:text-3xl font-bold text-brand-text">Dashboard</h1>
        <p class="text-sm text-brand-muted mt-1">{user.email}</p>
      </div>

      <!-- Success Message -->
      {cancelled && (
        <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div>
              <p class="text-green-700 font-medium">Order cancelled successfully</p>
              {refundAmount && (
                <p class="text-sm text-green-600 mt-1">
                  A refund of ${refundAmount} has been processed to your original payment method
                </p>
              )}
            </div>
          </div>
        </div>
      )}

      <!-- Error Message -->
      {error && (
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0">
              <svg class="w-4 h-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p class="text-red-700 font-medium">
              {error === 'order_not_found' && 'Order not found'}
              {error === 'unauthorized' && 'You do not have permission to cancel this order'}
              {error === 'cannot_cancel' && 'This order cannot be cancelled'}
              {error === 'cancel_failed' && 'Failed to cancel order. Please try again.'}
              {error === 'refund_failed' && 'Order cancelled but refund failed. Please contact support.'}
              {error === 'unexpected' && 'An unexpected error occurred'}
            </p>
          </div>
        </div>
      )}

      <!-- Membership Banner -->
      {membership && (
        <div class="bg-gradient-to-r from-brand-primary to-brand-accent text-white rounded-lg p-4 mb-6">
          <div class="flex justify-between items-center">
            <div>
              <h3 class="font-semibold">✨ Active Member</h3>
              <p class="text-sm opacity-90">Enjoy member pricing on all orders</p>
            </div>
            <div class="text-right">
              <p class="text-sm opacity-90">Expires</p>
              <p class="font-semibold">{new Date(membership.end_date).toLocaleDateString()}</p>
              <p class="text-xs">{membership.daysRemaining} days left</p>
            </div>
          </div>
        </div>
      )}

      <!-- Stats Cards -->
      {stats.totalOrders > 0 && (
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <p class="text-sm text-brand-muted">Total Orders</p>
            <p class="text-2xl font-bold text-brand-text">{stats.totalOrders}</p>
          </div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <p class="text-sm text-brand-muted">Total Spent</p>
            <p class="text-2xl font-bold text-brand-text">{formatCents(stats.totalSpent)}</p>
          </div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <p class="text-sm text-brand-muted">Total Weight</p>
            <p class="text-2xl font-bold text-brand-text">{stats.totalWeight.toFixed(1)} lbs</p>
          </div>
        </div>
      )}

      <!-- Quick Actions -->
      <div class="mb-6">
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <a href="/start-basic?fresh=true" class="bg-brand-primary hover:bg-orange-600 text-white p-4 rounded-lg shadow-sm transition text-center">
            <div class="font-semibold">Schedule Pickup</div>
            <div class="text-sm opacity-90">New laundry order</div>
          </a>
          <a href="/dashboard/profile" class="bg-white hover:bg-gray-50 border border-gray-200 text-brand-text p-4 rounded-lg shadow-sm transition text-center">
            <div class="font-semibold">Profile Settings</div>
            <div class="text-sm text-brand-muted">Update preferences</div>
          </a>
        </div>
      </div>

      <!-- Active Orders -->
      {activeOrders.length > 0 && (
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
          <div class="p-4 border-b border-gray-200">
            <h2 class="font-semibold text-brand-text">Active Orders</h2>
          </div>
          <div class="divide-y divide-gray-200">
            {activeOrders.map(order => (
              <a href={`/dashboard/orders/${order.id}`} class="block p-4 hover:bg-gray-50 transition">
                <div class="flex justify-between items-start mb-2">
                  <div>
                    <span class="text-sm font-medium text-brand-text">{formatOrderId(order.id)}</span>
                    <span class={`ml-2 inline-block px-2 py-1 text-xs rounded-full ${getStatusColor(order.status)}`}>
                      {getStatusLabel(order.status)}
                    </span>
                  </div>
                  <span class="text-sm font-semibold text-brand-text">
                    {formatCents(order.total_cents || order.subtotal_cents)}
                  </span>
                </div>
                <div class="text-sm text-brand-muted">
                  {order.service_type} • {new Date(order.pickup_date).toLocaleDateString()}
                  {order.time_windows?.label && ` • ${order.time_windows.label}`}
                </div>
                {order.pickup_address_line1 && (
                  <div class="text-xs text-brand-muted mt-1">
                    {order.pickup_address_line1}, {order.pickup_address_city}
                  </div>
                )}
              </a>
            ))}
          </div>
        </div>
      )}

      <!-- Upcoming Pickups -->
      {upcomingPickups.length > 0 && (
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
          <div class="p-4 border-b border-gray-200">
            <h2 class="font-semibold text-brand-text">Upcoming Pickups</h2>
          </div>
          <div class="divide-y divide-gray-200">
            {upcomingPickups.map(pickup => (
              <a href={`/dashboard/orders/${pickup.id}`} class="block p-4 hover:bg-gray-50 transition">
                <div class="flex items-start gap-3">
                  <svg class="w-5 h-5 text-brand-primary mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <div class="flex-1 min-w-0">
                    <div class="text-sm font-medium text-brand-text">
                      {new Date(pickup.pickup_date).toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}
                    </div>
                    <div class="text-sm text-brand-muted">
                      {pickup.time_windows?.label || 'Time TBD'}
                    </div>
                    {pickup.pickup_address_line1 && (
                      <div class="text-sm text-brand-muted truncate">
                        {pickup.pickup_address_line1}
                        {pickup.pickup_address_line2 && `, ${pickup.pickup_address_line2}`}
                      </div>
                    )}
                    {pickup.notes && (
                      <div class="text-xs text-brand-muted mt-1 italic">Note: {pickup.notes}</div>
                    )}
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      )}

      <!-- Order History -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200">
        <div class="p-4 border-b border-gray-200">
          <h2 class="font-semibold text-brand-text">Order History</h2>
        </div>
        {orderHistory.length > 0 ? (
          <div class="divide-y divide-gray-200">
            {orderHistory.map(order => (
              <a href={`/dashboard/orders/${order.id}`} class="block p-4 hover:bg-gray-50 transition">
                <div class="flex justify-between items-center">
                  <div>
                    <div class="text-sm font-medium text-brand-text">{formatOrderId(order.id)}</div>
                    <div class="text-sm text-brand-muted">
                      {new Date(order.pickup_date).toLocaleDateString()} • {order.service_type}
                      {order.measured_weight_lb && ` • ${order.measured_weight_lb.toFixed(1)} lbs`}
                    </div>
                  </div>
                  <div class="text-right">
                    <div class="text-sm font-semibold text-brand-text">
                      {formatCents(order.total_cents || order.subtotal_cents)}
                    </div>
                    <div class={`text-xs ${getStatusColor(order.status)}`}>
                      {getStatusLabel(order.status)}
                    </div>
                  </div>
                </div>
              </a>
            ))}
          </div>
        ) : (
          <div class="p-8 text-center text-brand-muted">
            <p class="text-sm">No completed orders yet</p>
            <a href="/start-basic" class="text-sm text-brand-primary hover:underline mt-2 inline-block">Schedule your first pickup</a>
          </div>
        )}
      </div>
    </main>
  </div>
</Layout>
